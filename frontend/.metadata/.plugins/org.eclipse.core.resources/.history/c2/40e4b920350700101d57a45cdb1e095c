$(document).ready(function() {
    // Initialize Kuroshiro (for Japanese transliteration)
    if (typeof kuroshiro !== "undefined" && typeof KuroshiroAnalyzerKuromoji !== "undefined") {
        kuroshiro.init(new KuroshiroAnalyzerKuromoji())
            .then(() => {
                console.log("Kuroshiro initialized successfully!");
            })
            .catch((err) => {
                console.error("Kuroshiro initialization failed:", err);
            });
    } else {
        console.error("Kuroshiro or its analyzer is not loaded.");
    }

    // Function to get pronunciation (e.g., romaji for Japanese, pinyin for Chinese)
    function getPronunciation(word, language) {
        console.log("Getting pronunciation for:", word, "in language:", language);

        if (language === "japanese" && typeof kuroshiro !== "undefined") {
            return kuroshiro.toRomaji(word); // Convert Japanese to romaji
        }
        if (language === "chinese" && typeof pinyin !== "undefined") {
            return pinyin(word, { style: pinyin.STYLE_NORMAL }).join(" "); // Convert Chinese to pinyin
        }
        return word; // For other languages, return the original word
    }

    // Function to get translation using MyMemory API
    async function getTranslation(word, language) {
        console.log("Getting translation for:", word, "from language:", language);
        try {
            // Map your language values to MyMemory language codes
            const languageMap = {
                japanese: "ja",
                korean: "ko",
                chinese: "zh-CN"
            };

            // Use MyMemory API to translate a single word
            let response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=${languageMap[language]}|en`);
            let data = await response.json();
            console.log("Translation response:", data);

            if (data.responseData && data.responseData.translatedText) {
                return data.responseData.translatedText; // Return the translated text
            } else {
                return "Translation not available"; // Fallback if translation fails
            }
        } catch (error) {
            console.error("Translation error:", error);
            return "Translation not available"; // Fallback if translation fails
        }
    }

    // Event listener for the "Generate Story" button
    $("#generateBtn").click(async function() {
        let prompt = $("#prompt").val();
        let level = $("#level").val();
        let wordLimit = $("#wordLimit").val();
        let language = $("input[name='language']:checked").val();

        // Validate input fields
        if (!prompt || !level || !wordLimit || !language) {
            alert("Please fill in all fields!");
            return;
        }

        // Prepare request data
        let requestData = { prompt, level, wordLimit, language };

        // Show loading animation
        $("#loadingIndicator").removeClass("hidden");
        $("#textPreview").html("");

        // Send AJAX request to the backend
        $.ajax({
            url: "http://127.0.0.1:5000/generate_text",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(requestData),
            success: function(response) {
                // Hide loading animation
                $("#loadingIndicator").addClass("hidden");

                if (response.success) {
                    $("#textPreview").empty();
                    let words = response.text.split(/\s+/);

                    // Append each word as a span with the "word" class
                    words.forEach(word => {
                        let span = $("<span>").text(word + " ").addClass("word");
                        $("#textPreview").append(span);
                    });

                    // Add event listener for text selection
                    $("#textPreview").on("mouseup", function() {
                        let selectedText = window.getSelection().toString().trim();
                        if (selectedText) {
                            // Show the "Translate" button near the selected text
                            let translateBtn = $("<button>").text("Translate").addClass("translateBtn");
                            let range = window.getSelection().getRangeAt(0);
                            let rect = range.getBoundingClientRect();

                            // Position the button near the selected text
                            translateBtn.css({
                                position: "absolute",
                                top: rect.bottom + window.scrollY + 5,
                                left: rect.left + window.scrollX,
                                zIndex: 1000
                            });

                            // Remove any existing translate button
                            $(".translateBtn").remove();

                            // Append the button to the body
                            $("body").append(translateBtn);

                            // Translate the selected text when the button is clicked
                            translateBtn.click(async function() {
                                let language = $("input[name='language']:checked").val();
                                let translation = await getTranslation(selectedText, language);
                                alert(`Selected Text: ${selectedText}\nTranslation: ${translation}`);
                                translateBtn.remove(); // Remove the button after translation
                            });
                        } else {
                            // Remove the translate button if no text is selected
                            $(".translateBtn").remove();
                        }
                    });
                } else {
                    alert("Error generating story: " + response.error);
                }
            },
            error: function(xhr, status, error) {
                // Hide loading animation
                $("#loadingIndicator").addClass("hidden");

                // Display error message
                alert("Failed to connect to the server: " + error);
                console.error("AJAX error:", error);
            }
        });
    });
});
$(document).ready(function() {
    // Initialize Kuroshiro (for Japanese transliteration)
    kuroshiro.init(new KuroshiroAnalyzerKuromoji())
        .then(() => {
            console.log("Kuroshiro initialized successfully!");
        })
        .catch((err) => {
            console.error("Kuroshiro initialization failed:", err);
        });

    // Initialize tooltips for words
    $(document).tooltip({
        items: ".word",
        content: function() {
            let word = $(this).text().trim(); // Get the word
            let language = $("input[name='language']:checked").val(); // Get selected language
            return `<strong>${word}</strong><br>Pronunciation: <em>${getPronunciation(word, language)}</em><br>Translation: <em>${getTranslation(word, language)}</em>`;
        },
        position: {
            my: "center bottom-20",
            at: "center top",
            using: function(position, feedback) {
                $(this).css(position);
                $("<div>")
                    .addClass("arrow")
                    .addClass(feedback.vertical)
                    .addClass(feedback.horizontal)
                    .appendTo(this);
            }
        }
    });

    // Function to get pronunciation (e.g., romaji for Japanese, pinyin for Chinese)
    function getPronunciation(word, language) {
        console.log("Getting pronunciation for:", word, "in language:", language);

        if (language === "japanese" && typeof kuroshiro !== "undefined") {
            return kuroshiro.toRomaji(word); // Convert Japanese to romaji
        }
        if (language === "chinese" && typeof pinyin !== "undefined") {
            return pinyin(word, { style: pinyin.STYLE_NORMAL }).join(" "); // Convert Chinese to pinyin
        }
        return word; // For other languages, return the original word
    }

    // Function to get translation using DeepL API
    async function getTranslation(word, language) {
        console.log("Getting translation for:", word, "from language:", language);
        try {
            let response = await fetch(`https://api-free.deepl.com/v2/translate?auth_key=YOUR_DEEPL_API_KEY&text=${word}&source_lang=${language.toUpperCase()}&target_lang=EN`);
            let data = await response.json();
            console.log("Translation response:", data);
            return data.translations[0].text; // Return the translated text
        } catch (error) {
            console.error("Translation error:", error);
            return "Translation not available"; // Fallback if translation fails
        }
    }

    // Event listener for the "Generate Story" button
    $("#generateBtn").click(async function() {
        let prompt = $("#prompt").val();
        let level = $("#level").val();
        let wordLimit = $("#wordLimit").val();
        let language = $("input[name='language']:checked").val();

        // Validate input fields
        if (!prompt || !level || !wordLimit || !language) {
            alert("Please fill in all fields!");
            return;
        }

        // Prepare request data
        let requestData = { prompt, level, wordLimit, language };

        // Show loading animation
        $("#loadingIndicator").removeClass("hidden");
        $("#textPreview").html("");

        // Send AJAX request to the backend
        $.ajax({
            url: "http://127.0.0.1:5000/generate_text",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(requestData),
            success: function(response) {
                // Hide loading animation
                $("#loadingIndicator").addClass("hidden");

                if (response.success) {
                    $("#textPreview").empty();
                    let words = response.text.split(/\s+/);

                    // Append each word as a span with the "word" class
                    words.forEach(word => {
                        let span = $("<span>").text(word + " ").addClass("word");
                        $("#textPreview").append(span);
                    });
                } else {
                    alert("Error generating story: " + response.error);
                }
            },
            error: function(xhr, status, error) {
                // Hide loading animation
                $("#loadingIndicator").addClass("hidden");

                // Display error message
                alert("Failed to connect to the server: " + error);
                console.error("AJAX error:", error);
            }
        });
    });
});